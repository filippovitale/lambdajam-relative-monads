[0m[[0minfo[0m] [0mResultSpec[0m
[0m[[0minfo[0m] [0mResult[0m
[0m[[0minfo[0m] [0m======[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mResult should:[0m
[0m[[0minfo[0m] [0m  [32m+[0m obey monad laws[0m
[0m[[0minfo[0m] [0m  [32m+[0m obey equal laws[0m
[0m[[0minfo[0m] [0m  [32m+[0m obey plus laws[0m
[0m[[0minfo[0m] [0m  [32m+[0m toEither should roundtrip[0m
[0m[[0minfo[0m] [0m  [32m+[0m getOrElse should always return value for Ok[0m
[0m[[0minfo[0m] [0m  [32m+[0m getOrElse should always return else for Error[0m
[0m[[0minfo[0m] [0m  [32m+[0m or returns first Ok[0m
[0m[[0minfo[0m] [0m  [32m+[0m or skips first Error[0m
[0m[[0minfo[0m] [0m  [32m+[0m setMessage on Ok is noop[0m
[0m[[0minfo[0m] [0m  [32m+[0m setMessage on Error always sets message[0m
[0m[[0minfo[0m] [0m  [32m+[0m addMessage on Ok is noop[0m
[0m[[31merror[0m] [0m  [33mx[0m addMessage on Error always adds message, prepending to any existing messages[0m
[0m[[31merror[0m] [0m Falsified after 0 passed tests.[0m
[0m[[31merror[0m] [0m > ARG_0: ""[0m
[0m[[31merror[0m] [0m > ARG_1: ""[0m
[0m[[31merror[0m] [0m > 'Left(: )' is Left but ': ' is not equal to ':' (Test.scala:20)[0m
[0m[[0minfo[0m] [0m[0m
[0m[[0minfo[0m] [0mTotal for specification ResultSpec[0m
[0m[[0minfo[0m] [0m[36mFinished in 482 ms[0m[0m
[0m[[0minfo[0m] [0m[36m[0m[36m12 examples, 1101 expectations, 1 failure, 0 error[0m[0m
[0m[[0minfo[0m] [0m[0m
